#!/bin/bash

# SBChroot - Setup and manage a chroot - version 2.5
# Copyright (c) 2007-2008, Michiel van Wessem, Manchester, United Kingdom
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
# * Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimer.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# Update: added case statement, and functions. Code improvement in
# chroot_create thanks to James Jones <andarius@errantnutron.com>

# set -e    # Exit on any given error.
# set -x    # Use this to turn debuggin on.

installpath="/home/ftp/mirrors/slackware.com/slackware-12.1"
installfiles="slackware"
buildenv=${buildenv:-"/home/sbchroot/slackware-12.1"}

# What do we want to install.
series="a ap d e f k kde kdei l n t tcl x xap y"

# config files
config_files="resolv.conf hosts X11/xorg.conf"

# Config directives
networking=${networking:-yes}
custprompt=${custprompt:-yes}

enable_utf=${enable_utf:-yes}
utf_lang="en_US.UTF-8"

# Warn if there are non standard packages on start-up or shutdown?
# This is disabled for now.
warning_nonstd=${warning_nonstd:-no}

# Set a custom language
# you can set it to the same language as your system as follows:
# lang=${LANG}
lang="en_US.UTF8"

# Set makeflags
JOBS="6"

# define your custom prompt below
# for example: prompt="(chroot) \u@\h:\w\$ "
prompt="\[\e[1;31m\]\u\[\e[m\]\[\e[1;35m\]@sbchroot\[\e[m\]\[\e[1;37m\]:\[\e[m\]\[\e[1;34m\]\w\[\e[m\]\[\e[1;37m\]\\\\$\[\e[m\]\[\e[1;37m\] "


# ------------------- No Edits Needed below this line ------------------- #

if [[ $UID != "0" ]]; then
    echo "you need to be root to run this program"
    exit 1
fi

# If I ever decide to switch to a config file:
globalrc="/etc/sbchrc"
localrc="${HOME}/.sbchrc"

if [[ -r ${globalrc} ]]; then
    source ${globalrc}
fi

if [[ -r ${localrc} ]]; then
    source ${localrc}
fi

function chroot_create() {
    echo "initiating building enviroment"
    echo "  *- creating initial directory"
    if [[ ! -d ${buildenv} ]]; then
        mkdir -p ${buildenv}
    fi

    echo "  *- installing packages ..."
    for s in ${series}; do
        echo " *- series ${s} ..."
        for pkg in  $(echo ${installpath}/${installfiles}/${s}/*.tgz); do
            echo "   \- installing $(basename ${pkg})"
            ROOT=${buildenv} /sbin/installpkg ${pkg} > /dev/null 2>&1
        done
    done
}

function chroot_config() {
    echo "  *- Final configuation"
    if [[ "${custprompt}" == "yes" ]]; then
        bashprofile="${buildenv}/root/.bash_profile"
        bashrc="${buildenv}/root/.bashrc"

# Just cause `cat' seems to have probelms if it doesn't
# start on line 1.
cat > ${bashprofile} << EOF
# .bash_profile
# bash configuration file for login-shells.

# if we can read .bashrc source it!
if [ -r ${HOME}/.bashrc ]; then
    source ${HOME}/.bashrc
fi
EOF

cat > ${bashrc} << EOF
# .bashrc
# bash configuration file for nonlogin-shells.

source /etc/profile > /dev/null 2>&1

LANG='${lang}'
MAKEFLAGS='-j ${JOBS}'
PS1='${prompt}'

export PS1
EOF

    fi

    echo "Done."
    if [[ "${networking}" == "yes" ]]; then
        for config in ${config_files}; do
            if [[ -f /etc/${config} ]]; then
                cp -v /etc/${config} ${buildenv}/etc/${config}
            fi
        done
    fi

}

function chroot_patch() {
    if [[ -d ${installpath}/patches/packages/ ]]; then
        ROOT=${buildenv} upgradepkg --install-new  ${installpath}/patches/packages/*.tgz
    fi

    if [[ $1 = "initial" ]]; then
        ( cd ${buildenv}
          for newfile in $(find etc -type f -name "*.new"); do
              oldfile=$(dirname ${newfile})/$(basename ${newfile} .new)
              mv -v ${newfile} ${oldfile}
          done
        )
    fi

    echo "Checking for .new files in /etc"
    find ${buildenv}/etc -name "*.new"
    echo "please move these files to their proper locations"
}

function chroot_wipe() {
    echo "THIS WILL WIPE YOUR CHROOT"
    echo -n "ARE YOU SURE YOU WANT TO DO THIS? (YES/NO) "
    read answer

    case ${answer} in
        YES)
            # Extra Safety measure: make sure ${buildenv} exists!
            if [[ -d ${buildenv} ]]; then
                echo ""
                echo "Please confirm deletion of ${buildenv} by"
                echo "typing \"CONFIRM\"" and pressing enter
                echo -n "> "
                read affirmative

                if [[ ${affirmative} = "CONFIRM" ]]; then
                    echo " * - Commencing deletion of chroot in ${buildenv}"
                    echo "   \ Deleting ..."
                    rm -rf ${buildenv}
                    echo "   \ Done."
                else
                    echo " * - Confirmation failure. Aborting deletion."
                    exit 1
                fi
            else
                echo "ERROR: ${buildenv} does not excist."
                echo "Aborting..."
                exit 3::
            fi
            ;;
        NO)
            echo "Okay. Wise Choice"
            exit 0
            ;;
        *)
            clear
            echo "Please type either \"YES\" or \"NO\""
            echo ""
            chroot_wipe
        ;;
    esac
}

function chroot_check() {
    for config in ${config_files}; do
        MD5SUM_LOC=$(md5sum /etc/${config})
        MD5SUM_CHR=$(md5sum ${buildevn}/etc/${config})

        if [[ ${MD5SUM_LOC} != ${MD5SUM_CHR} ]]; then
            if [[ -f /etc/${config} ]]; then
                echo "* - Updating ${buildenv}/etc/${config}"
                cp ${MD5SUM_LOC} ${MD5SUM_CHR}
            fi
        fi
    done
}

function chroot_warn() {
    if [[ ${warning_nonstd} == "yes" ]]; then
        echo "testing"
        #if [[ ]];
        #    echo "WARNING: You're chroot enviroment is no longer clean."
        #    echo "You have the following non-standard slackware packages installed:"
        #fi
    fi
}

function chroot_start() {
    if [[ ! -e ${buildenv} ]]; then
        echo "ERROR; ${buildenv} doesn't exist"
        exit 1
    fi

    # Check if the config files have been changed in any way
    chroot_check

    mount -o bind /proc ${buildenv}/proc -t proc
    mount -o bind /sys ${buildenv}/sys -t sysfs
    mount -o bind /dev ${buildenv}/dev -t dev

    clear

    chroot ${buildenv} /bin/bash
}

function chroot_stop() {
    clear
    umount ${buildenv}/proc || echo "error can't umoun't ${buildenv}/proc. Please unmount manually"
    umount ${buildenv}/sys || echo "error can't umoun't ${buildenv}/proc. Please unmount manually"
    umount ${buildenv}/dev || echo "error can't umoun't ${buildenv}/proc. Please unmount manually"
}

function sbchroot_clean() {

    if [[ $1 = "-clean-system" ]]; then
        pkgdir=${buidenv}/var/log/packages
        for package in $(echo ${pkgdir}/*_SBo | awk -F/ '{ print $NF }'); do
            ROOT=${buildenv} /sbin/removepkg ${package}
        done
    fi

    # <code = 'untested'> but should work ;-)
    echo "You have requested to remove the following packages"
    echo "from the chroot in ${buildenv}:"

    for rmpkg in "${@}"; do
        echo "ROOT=${buildenv} /sbin/removepkg ${rmpkg}"
    done
}

function chroot_help() {
    echo ""
    echo "   Usage: $(basename $0) {create | install | upgrade | patch | wipe | remove | start | help}"
    echo ""
    echo "   - create   ::  create or install a new chroot enviroment."
    echo "   - install  ::  same as create"
    echo ""
    echo "    - config  ::  configuration of your chroot enviroment"
    echo ""
    echo "   - rebuild  ::  removes and reinstalls the chroot enviroment"
    echo ""
    echo "   - upgrade  ::  upgrade or patch the chroot enviroment"
    echo "   - patch    ::  same as upgrade"
    echo ""
    echo "   - wipe     ::  wipe and remove the chroot"
    echo "   - remove   ::  same wipe"
    echo ""
    echo "   - start    ::  start the chroot enviroment"
    echo ""
    echo "   - help     ::  This help"
    echo ""
}

# See how we were called.
case "$1" in
    -create | -install | -c | -i)
        chroot_create
        chroot_patch initial
        chroot_config
        ;;
    -upgrade | -patch | -u | -p)
        chroot_patch
        ;;
    -wipe | -remove)
        chroot_wipe
        ;;
    -clear | -clean | -clean-system)
        chroot_clean
        ;;
    -rebuild | -r)
        chroot_wipe
        chroot_create
        chroot_patch initial
        chroot_config
        ;;
    -config | -conf | -rc)
        chroot_config
        ;;
    -start | -s)
        chroot_start
        chroot_stop
        ;;
    -help | -h | -?)
        chroot_help
        ;;
    *)
        chroot_start
        chroot_stop
        ;;
esac

#EOF
